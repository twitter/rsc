#!/usr/bin/env python
import json, os, shutil, subprocess, sys, tempfile, time

if len(sys.argv) != 2:
  print "usage: " + sys.argv[0] + " <remote>"
  sys.exit(1)
remote = sys.argv[1]

cwd = os.path.abspath(".")
def cd(path):
  print "cd " + path
  cwd = path
def stdout(command):
  print command
  result = subprocess.check_output(command, shell=True, stderr=subprocess.STDOUT, cwd=cwd).strip()
  if not result: raise Exception("empty output of " + command)
  return result
def run(command):
  print command
  subprocess.check_output(command, shell=True, stderr=subprocess.STDOUT, cwd=cwd)
def call(command):
  print command
  return subprocess.call(command, shell=True, stderr=subprocess.STDOUT, cwd=cwd)

print "Checking if crawler is already running..."
running_crawlers = stdout("ps aux | grep bench_crawl | grep -v grep").split("\n")
running_crawlers = filter(lambda line: not str(os.getpid()) in line, running_crawlers)
if running_crawlers:
  print sys.argv[0] + " is already running:\n" + "\n".join(running_crawlers)
  sys.exit(1)

print ""
print "Cloning repository..."
master_path = tempfile.mkdtemp(prefix = "master_")
performance_path = tempfile.mkdtemp(prefix = "performance_")
run("git clone --branch master " + remote + " " + master_path)
run("git clone --branch performance " + remote + " " + performance_path)

print ""
print "Computing work queue..."
cd(master_path)
parent_of_add_bench_crawl_commit = stdout("git log -1 --format=%H ':/Add bin/bench_crawl'")
todo = stdout("git rev-list --ancestry-path " + parent_of_add_bench_crawl_commit + "..HEAD").split("\n")
print "Found " + str(len(todo)) + " eligible commits"
performance_json_path = os.path.join(performance_path, "performance.json")
performance_json = []
with open(performance_json_path, "r") as performance_json_file:
  performance_json = json.load(performance_json_file)
done = map(lambda json: json["GitFullSha"], performance_json)
print "Found " + str(len(done)) + " processed commits"
todo = filter(lambda sha: not sha in done, todo)
print "Detected " + str(len(todo)) + " todo commits"
for i, sha in enumerate(todo):
  print "(" + str(i + 1) + "/" + str(len(todo)) + ") " + sha
shutil.rmtree(performance_path)

print ""
print "Benchmarking work queue..."
for i, sha in enumerate(todo):
  print "========================================================================"
  print "(" + str(i + 1) + "/" + str(len(todo)) + ") " + sha
  run("git reset --hard " + sha)
  _, bench_ci_log_path = tempfile.mkstemp(prefix = "bench_ci_")
  bench_ci_command = "bin/bench CI | tee " + bench_ci_log_path
  call(bench_ci_command)
  with open(bench_ci_log_path, "r") as bench_ci_log_file:
    bench_ci_log = bench_ci_log_file.read()
    if not "[error]" in bench_ci_log:
      print ""
      print "Successfully benchmarked " + sha
      bench_upload = os.path.join(master_path, "bin/bench_upload")
      call(bench_upload + " " + bench_ci_log_path)
    else:
      print ""
      print "Error benchmarking " + sha
shutil.rmtree(master_path)
